from __future__ import print_function
import jsonctmctree.ll, jsonctmctree.interface
from CodonGeneconv import *
from copy import deepcopy
import os
import numpy as np
import pandas as pd
from numpy import random
from scipy import linalg

import numpy as np
import torch


import numdifftools as nd
import autograd as at

import numpy as np
from sympy import symbols, Eq, solve, log
import tensorflow as tf

def rosen(x):
    return (1-x[0])**2 + 105.*(x[1]-x[0]**2)**2



#H = nd.Hessian(rosen)([1, 1])
# print(H)

dd=at.hessian(rosen,[1,1])
print(dd)

def test_hessian_matrix_product():
    fun = lambda a: np.sum(np.sin(a))
    a = np.randn(5, 4)
    V = np.randn(5, 4)
    H = at.hessian(fun)(a)
    print(H)



def hessian(partials_second, cross_derivatives):
	hessianmat = np.matrix([[partials_second[0], cross_derivatives], [cross_derivatives, partials_second[1]]])
	return hessianmat

def partial(element, function):

	partial_diff = function.diff(element)

	return partial_diff

def gradient(partials):

	grad = np.matrix([[partials[0]], [partials[1]]])

	return grad

def determat(partials_second, cross_derivatives, singular, symbols_list):

	det = partials_second[0].subs([(symbols_list[0], singular[symbols_list[0]]), (symbols_list[1], singular[symbols_list[1]])]) * partials_second[1].subs([(symbols_list[0], singular[symbols_list[0]]), (symbols_list[1], singular[symbols_list[1]])]) - (cross_derivatives.subs([(symbols_list[0], singular[symbols_list[0]]), (symbols_list[1], singular[symbols_list[1]])]))**2

	return det

def gradient_to_zero(symbols_list, partials):

	partial_x = Eq(partials[0], 0)
	partial_y = Eq(partials[1], 0)

	singular = solve((partial_x, partial_y), (symbols_list[0], symbols_list[1]))

	return singular


def main():

	x, y = symbols('x y')
	symbols_list = [x, y]
	function = x**2 - (3/2)*x*y + y**2
	partials, partials_second = [], []

	for element in symbols_list:
		partial_diff = partial(element, function)
		partials.append(partial_diff)

	grad = gradient(partials)
	singular = gradient_to_zero(symbols_list, partials)

	cross_derivatives = partial(symbols_list[0], partials[1])

	for i in range(0, len(symbols_list)):
		partial_diff = partial(symbols_list[i], partials[i])
		partials_second.append(partial_diff)

	hessianmat = hessian(partials_second, cross_derivatives)
	det = determat(partials_second, cross_derivatives, singular, symbols_list)

	print("Hessian matrix that organizes all the second partial derivatives of the function {0} is :\n {1}".format(function, hessianmat))
	print("Determinant in the singular point {0} is :\n {1}".format(singular, det))

main()